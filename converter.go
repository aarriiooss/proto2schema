package main

import (
	"context"
	"fmt"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"io"
	"log"
	"os"
	"strings"
)

const protoIndexKey = iota

type protoPath []int32

type descriptorConstraint interface {
	*descriptorpb.DescriptorProto |
		*descriptorpb.EnumDescriptorProto
}

type indexMetadata[T descriptorConstraint] struct {
	descriptor T
	// file descriptor of the file this message belongs to
	// useful for picking out comments or anything else we can't get at the message level
	fileDescriptor *descriptorpb.FileDescriptorProto

	// path of this field in sourceInfo from fileDescriptor
	path protoPath

	// key in parent map - is this needed?
	key string
}

type messageIndexType map[string]*indexMetadata[*descriptorpb.DescriptorProto]
type enumIndexType map[string]*indexMetadata[*descriptorpb.EnumDescriptorProto]

type protoIndex struct {
	messageIndex messageIndexType
	enumIndex    enumIndexType
}

func addMetadata[T descriptorConstraint](
	indexMap map[string]*indexMetadata[T],
	key string,
	descriptor T,
	file *descriptorpb.FileDescriptorProto,
	path protoPath,
) {
	md, ok := indexMap[key]
	if !ok {
		md = &indexMetadata[T]{}
		indexMap[key] = md
	}
	md.descriptor = descriptor
	md.fileDescriptor = file
	md.path = path
	md.key = key
}

func (p protoIndex) addMessage(key string, path protoPath, file *descriptorpb.FileDescriptorProto, message *descriptorpb.DescriptorProto) {
	addMetadata(p.messageIndex, key, message, file, path)
}

func (p protoIndex) addEnum(key string, path protoPath, file *descriptorpb.FileDescriptorProto, message *descriptorpb.EnumDescriptorProto) {
	addMetadata(p.enumIndex, key, message, file, path)
}

func newProtoIndex() *protoIndex {
	return &protoIndex{
		messageIndex: make(messageIndexType),
		enumIndex:    make(enumIndexType),
	}
}

type SchemaWriter interface {
	// Writef write formatted line with indentation level
	Writef(level int, format string, args ...interface{})
	// WriteLine write raw line (with new line) with indentation level
	WriteLine(level int, line string)
}

type fileWriter struct {
	writer io.Writer
	logger *log.Logger
}

func (fw *fileWriter) Writef(level int, format string, args ...interface{}) {
	indent := strings.Repeat("  ", level)
	_, err := fmt.Fprintf(fw.writer, indent+format, args...)
	if err != nil {
		fw.logger.Println(err)
	}
}

func (fw *fileWriter) WriteLine(level int, line string) {
	indent := strings.Repeat("  ", level)
	_, err := fmt.Fprintf(fw.writer, "%s%s\n", indent, line)
	if err != nil {
		fw.logger.Println(err)
	}
}

func NewFileWriter(w io.Writer, l *log.Logger) SchemaWriter {
	return &fileWriter{
		writer: w,
		logger: l,
	}
}

func main() {
	descriptorPath := "gen/addressbook.binpb"
	fdhSchemaPath := "gen/addressbook.fdhschema"
	logger := log.New(os.Stderr, "", log.LstdFlags|log.Lmicroseconds|log.Lshortfile)
	pIndex := newProtoIndex()
	ctx := context.WithValue(context.TODO(), protoIndexKey, pIndex)

	logger.Println("Attempting to read binbp")
	// Read the file descriptor set generated by protoc.
	data, err := os.ReadFile(descriptorPath)
	if err != nil {
		logger.Fatalf("Failed to read descriptor set: %v", err)
	}
	logger.Printf("Read descriptor set: %s", descriptorPath)

	// Unmarshal the data into a FileDescriptorSet.
	var fds descriptorpb.FileDescriptorSet
	if err := proto.Unmarshal(data, &fds); err != nil {
		logger.Fatalf("Failed to unmarshal descriptor set: %v", err)
	}
	logger.Println("Unmarshalled descriptor set.")

	for _, file := range fds.File {
		packageName := "." + file.GetPackage()

		// Build lookup maps for top-level messages and enums.
		for i, msg := range file.MessageType {
			fqName := packageName + "." + msg.GetName()
			topMsgPath := protoPath{4, int32(i)}
			pIndex.addMessage(fqName, topMsgPath, file, msg)
			//indexNestedMessages(fqName, msg, file, topMsgPath, pIndex)
			indexNestedMessages(ctx, fqName)

		}
		for i, enum := range file.EnumType {
			fqName := packageName + "." + enum.GetName()
			enumPath := protoPath{5, int32(i)}
			pIndex.addEnum(fqName, enumPath, file, enum)
		}
	}

	logger.Println("finish parsing descriptor set.")
	// Create or open the output file.
	outFile, err := os.Create(fdhSchemaPath)
	sw := NewFileWriter(outFile, logger)
	if err != nil {
		logger.Fatalf("Failed to create output file: %v", err)
	}
	defer func(outFile *os.File) {
		err := outFile.Close()
		if err != nil {

		}
	}(outFile)

	for _, ep := range findEntrypoints(pIndex.messageIndex) {
		if _, ok := pIndex.messageIndex[ep]; ok {
			printMessage(ctx, sw, ep, 0, make(map[string]bool))
		}
	}
}

func printCommentIfAny(w SchemaWriter, fileDescriptor *descriptorpb.FileDescriptorProto, path protoPath, level int) {
	// remove comments from google fields as they are quite long
	if strings.HasPrefix(fileDescriptor.GetPackage(), "google.") == true {
		return
	}

	comment := lookupComment(path, fileDescriptor.SourceCodeInfo)
	if comment != "" {
		w.Writef(level, "// %s\n", comment)
	}
}

// printMessage prints a message definition following the desired format.
// It handles scalar fields, nested message fields, and enum fields.
func printMessage(
	ctx context.Context,
	w SchemaWriter,
	msgKey string,
	level int,
	visited map[string]bool,
) {
	protoIndexes := ctx.Value(protoIndexKey).(*protoIndex)

	msgMetadata := protoIndexes.messageIndex[msgKey]
	msg := msgMetadata.descriptor
	path := msgMetadata.path

	if visited[msgKey] {
		w.Writef(level, "<Circular Ref> %s\n", msg.GetName())
		return
	}
	visited[msgKey] = true
	defer delete(visited, msgKey)

	// If there is a comment on the message, print it.
	printCommentIfAny(w, msgMetadata.fileDescriptor, path, level)

	w.Writef(level, "%s {\n", msg.GetName())

	// For each field in the message:
	for i, field := range msg.Field {
		// For a field, the path is the message's path plus [2, field_index] (2 = message.field)
		fieldPath := append(append([]int32(nil), path...), 2, int32(i))

		printCommentIfAny(w, msgMetadata.fileDescriptor, fieldPath, level+1)

		// Depending on field type and label, print accordingly.
		if field.GetLabel() == descriptorpb.FieldDescriptorProto_LABEL_REPEATED {
			// For repeated fields, use square brackets.
			w.Writef(level+1, "%s [\n", field.GetName())
			// If the field is a message, print its definition inline.
			if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_MESSAGE {
				typeName := field.GetTypeName()
				if _, ok := protoIndexes.messageIndex[typeName]; ok {
					printMessage(ctx, w, typeName, level+2, visited)
				}
			} else if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_ENUM {
				typeName := field.GetTypeName()

				if enumMeta, ok := protoIndexes.enumIndex[typeName]; ok {
					printCommentIfAny(w, enumMeta.fileDescriptor, enumMeta.path, level+2)
					printEnum(ctx, w, typeName, level+2)
				}
			}
			w.Writef(level+1, "]\n")
		} else {
			// For non-repeated fields, if the type is a message or enum, print inline.
			if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_MESSAGE {
				typeName := field.GetTypeName()
				w.Writef(level+1, "%s %s {\n", field.GetName(), typeName)
				if _, ok := protoIndexes.messageIndex[typeName]; ok {
					printMessage(ctx, w, typeName, level+2, visited)
				}
				w.Writef(level+1, "}\n")
			} else if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_ENUM {
				typeName := field.GetTypeName()
				typeNameSplit := strings.Split(typeName, ".")
				readableTypeName := typeNameSplit[len(typeNameSplit)-1]

				if enumMeta, ok := protoIndexes.enumIndex[typeName]; ok {
					printCommentIfAny(w, enumMeta.fileDescriptor, enumMeta.path, level+1)
					w.Writef(level+1, "%s %s {\n", "ENUM", readableTypeName)
					printEnum(ctx, w, typeName, level+2)
				}
				w.Writef(level+1, "}\n")
			} else {
				humeanReadableTypeSplit := strings.Split(field.GetType().String(), "_")
				humanReadableTypeName := humeanReadableTypeSplit[len(humeanReadableTypeSplit)-1]
				w.Writef(level+1, "%s %s\n\n", humanReadableTypeName, field.GetName())
			}
		}
	}

	w.Writef(level, "}\n")
}

// printEnum prints an enum definition with its values and comments.
func printEnum(ctx context.Context, w SchemaWriter, key string, level int) {
	protoIndexes := ctx.Value(protoIndexKey).(*protoIndex)
	enumMetadata := protoIndexes.enumIndex[key]
	enum := enumMetadata.descriptor
	path := enumMetadata.path

	// Optionally print a comment for the enum.
	for i, value := range enum.Value {
		// For an enum value, the path is the enum's path plus [2, value_index] (2 = enum.value)
		valuePath := append(append([]int32(nil), path...), 2, int32(i))
		printCommentIfAny(w, enumMetadata.fileDescriptor, valuePath, level)
		w.WriteLine(level, value.GetName())
		w.WriteLine(level, "")
	}
}

// lookupComment searches the sourceInfo locations for one whose Path matches the given path.
// It returns any leading comments (or, if absent, trailing comments) attached to that element.
func lookupComment(path protoPath, sourceInfo *descriptorpb.SourceCodeInfo) string {
	if sourceInfo == nil {
		return ""
	}
	for _, loc := range sourceInfo.Location {
		if equalPath(loc.Path, path) {
			comment := strings.TrimSpace(loc.GetLeadingComments())
			if comment == "" {
				comment = strings.TrimSpace(loc.GetTrailingComments())
			}
			return comment
		}
	}
	return ""
}

// entrypoint is any message that doesn't appear in other fields (or types?)
func findEntrypoints(messageIndex messageIndexType) []string {
	// Create a set to track used message types.
	used := make(map[string]bool)

	// Iterate through all messages in the messageIndex.
	for _, metadata := range messageIndex {
		// Process fields in this message.
		for _, field := range metadata.descriptor.Field {
			if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_MESSAGE {
				// Mark the type as used. The field type name should be fully qualified.
				used[field.GetTypeName()] = true
			}
		}
	}

	// Now, any message in messageIndex that isn't in the 'used' map is an entry point.
	var entrypoints []string
	for name := range messageIndex {
		if !used[name] {
			entrypoints = append(entrypoints, name)
		}
	}
	return entrypoints
}

func indexNestedMessages(ctx context.Context, parent string) {
	protoIndexes := ctx.Value(protoIndexKey).(*protoIndex)

	if msgMetadata, ok := protoIndexes.messageIndex[parent]; ok {
		parentPath := msgMetadata.path
		parentFile := msgMetadata.fileDescriptor
		for j, nested := range msgMetadata.descriptor.NestedType {
			fqName := parent + "." + nested.GetName()
			nestedPath := append(append([]int32(nil), parentPath...), 3, int32(j))
			protoIndexes.addMessage(fqName, nestedPath, parentFile, nested)
			indexNestedMessages(ctx, fqName)
		}

		for j, enum := range msgMetadata.descriptor.EnumType {
			fqName := parent + "." + enum.GetName()
			enumPath := append(append([]int32(nil), parentPath...), 3, int32(j))
			protoIndexes.addEnum(fqName, enumPath, parentFile, enum)
		}
	}

}

// equalPath compares two slices of int32 for equality.
func equalPath(a, b protoPath) bool {
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}
