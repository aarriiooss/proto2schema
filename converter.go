package main

import (
	"fmt"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"log"
	"os"
	"strings"
)

type messageIndexMetadata struct {
	// proto descriptor of the message which contains fields etc
	descriptor *descriptorpb.DescriptorProto

	// file descriptor of the file this message belongs to
	// useful for picking out comments
	fileDescriptor *descriptorpb.FileDescriptorProto

	//
}

type protoPath []int32
type protoPathIndexType map[string]protoPath
type messageIndexType map[string]*descriptorpb.DescriptorProto
type enumIndexType map[string]*descriptorpb.EnumDescriptorProto

// Global maps to resolve message and enum definitions by fully-qualified name.
var messageIndex = make(messageIndexType)
var enumIndex = make(enumIndexType)
var protoPathIndex = make(protoPathIndexType)

// For simplicity, assume all definitions come from one file.
var sourceInfo *descriptorpb.SourceCodeInfo

func main() {
	descriptorPath := "gen/addressbook.binpb"
	fdhSchemaPath := "gen/addressbook.fdhschema"

	log.Println("Attempting to read binbp")
	// Read the file descriptor set generated by protoc.
	data, err := os.ReadFile(descriptorPath)
	if err != nil {
		log.Fatalf("Failed to read descriptor set: %v", err)
	}
	log.Printf("Read descriptor set: %s", descriptorPath)

	// Unmarshal the data into a FileDescriptorSet.
	var fds descriptorpb.FileDescriptorSet
	if err := proto.Unmarshal(data, &fds); err != nil {
		log.Fatalf("Failed to unmarshal descriptor set: %v", err)
	}
	log.Println("Unmarshalled descriptor set.")

	for _, file := range fds.File {
		sourceInfo = file.SourceCodeInfo

		packageName := "." + file.GetPackage()

		// Build lookup maps for top-level messages and enums.
		for i, msg := range file.MessageType {
			//fqName := msg.GetName() // For top-level messages, use simple names.
			fqName := packageName + "." + msg.GetName()
			messageIndex[fqName] = msg
			topMsgPath := protoPath{4, int32(i)}
			protoPathIndex[fqName] = topMsgPath
			indexNestedMessages(fqName, msg, topMsgPath)
		}
		for i, enum := range file.EnumType {
			fqName := packageName + "." + enum.GetName()
			enumIndex[fqName] = enum
			protoPathIndex[fqName] = protoPath{5, int32(i)}
		}
	}

	log.Println("finish parsing descriptor set.")
	// Create or open the output file.
	outFile, err := os.Create(fdhSchemaPath)
	if err != nil {
		log.Fatalf("Failed to create output file: %v", err)
	}
	defer func(outFile *os.File) {
		err := outFile.Close()
		if err != nil {

		}
	}(outFile)

	for _, ep := range findEntrypoints() {
		if entryPoint, ok := messageIndex[ep]; ok {
			if entryPointPath, ok := protoPathIndex[ep]; ok {
				printMessage(outFile, entryPoint, entryPointPath, 0)
			} else {
				log.Println("Failed to find path for entrypoint")
			}

			//fmt.Fprintf(outFile, "\n")
		}
	}

}

func printCommentIfAny(outFile *os.File, path protoPath, level int) {
	// In this stub, we assume that if a path is provided and a comment is found, we print it.
	// For example, you might iterate over sourceInfo.Location and compare the Path.
	// Here we simply demonstrate with a placeholder.
	comment := lookupComment(path)
	if comment != "" {
		fmt.Fprintf(outFile, "%s// %s\n", indent(level), comment)
	}
}

// indent returns a string of spaces for indentation.
func indent(level int) string {
	return strings.Repeat("  ", level)
}

// printMessage prints a message definition following the desired format.
// It handles scalar fields, nested message fields, and enum fields.
func printMessage(outFile *os.File, msg *descriptorpb.DescriptorProto, path protoPath, level int) {
	// If there is a comment on the message, print it.
	printCommentIfAny(outFile, path, level)

	fmt.Fprintf(outFile, "%s%s {\n", indent(level), msg.GetName())

	// For each field in the message:
	for i, field := range msg.Field {
		// For a field, the path is the message's path plus [2, field_index] (2 = message.field)
		fieldPath := append(append([]int32(nil), path...), 2, int32(i))
		// (A complete implementation would derive the path based on the descriptor structure.)
		printCommentIfAny(outFile, fieldPath, level+1)

		// Depending on field type and label, print accordingly.
		if field.GetLabel() == descriptorpb.FieldDescriptorProto_LABEL_REPEATED {
			// For repeated fields, use square brackets.
			fmt.Fprintf(outFile, "%s%s [\n", indent(level+1), field.GetName())
			// If the field is a message, print its definition inline.
			if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_MESSAGE {
				typeName := field.GetTypeName()
				if m, ok := messageIndex[typeName]; ok {
					// Optionally print a comment for the field if available.
					if nestedPath, ok := protoPathIndex[typeName]; ok {
						printMessage(outFile, m, nestedPath, level+2)
					} else {
						printMessage(outFile, m, nil, level+2)
					}
				}
			} else if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_ENUM {
				typeName := field.GetTypeName()
				if e, ok := enumIndex[typeName]; ok {
					if enumPath, ok := protoPathIndex[typeName]; ok {
						printEnum(outFile, e, enumPath, level+2)
					} else {
						printEnum(outFile, e, nil, level+2)
					}
				}
			}
			fmt.Fprintf(outFile, "%s]\n", indent(level+1))
		} else {
			// For non-repeated fields, if the type is a message or enum, print inline.
			if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_MESSAGE {
				typeName := field.GetTypeName()
				fmt.Fprintf(outFile, "%s%s %s {\n", indent(level+1), field.GetName(), typeName)
				if m, ok := messageIndex[typeName]; ok {
					if nestedPath, ok := protoPathIndex[typeName]; ok {
						printMessage(outFile, m, nestedPath, level+2)
					} else {
						printMessage(outFile, m, nil, level+2)
					}
				}
				fmt.Fprintf(outFile, "%s}\n", indent(level+1))
			} else if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_ENUM {
				typeName := field.GetTypeName()
				typeNameSplit := strings.Split(typeName, ".")
				readableTypeName := typeNameSplit[len(typeNameSplit)-1]
				fmt.Fprintf(outFile, "%s%s %s {\n", indent(level+1), "ENUM", readableTypeName)
				if e, ok := enumIndex[typeName]; ok {
					if enumPath, ok := protoPathIndex[typeName]; ok {
						printEnum(outFile, e, enumPath, level+2)
					} else {
						printEnum(outFile, e, nil, level+2)
					}
				}
				fmt.Fprintf(outFile, "%s}\n", indent(level+1))
			} else {
				humeanReadableTypeSplit := strings.Split(field.GetType().String(), "_")
				humanReadableTypeName := humeanReadableTypeSplit[len(humeanReadableTypeSplit)-1]
				fmt.Fprintf(outFile, "%s%s %s\n", indent(level+1), humanReadableTypeName, field.GetName())
			}
		}
	}

	fmt.Fprintf(outFile, "%s}\n", indent(level))
}

// printEnum prints an enum definition with its values and comments.
func printEnum(outFile *os.File, enum *descriptorpb.EnumDescriptorProto, path protoPath, level int) {
	// Optionally print a comment for the enum.
	printCommentIfAny(outFile, path, level)
	for i, value := range enum.Value {
		// For an enum value, the path is the enum's path plus [2, value_index] (2 = enum.value)
		valuePath := append(append([]int32(nil), path...), 2, int32(i))
		printCommentIfAny(outFile, valuePath, level)
		fmt.Fprintf(outFile, "%s%s", indent(level), value.GetName())
		fmt.Fprintln(outFile)
	}
}

// entrypoint is any message that doesn't appear in other fields (or types?)
func findEntrypoints() []string {
	// Create a set to track used message types.
	used := make(map[string]bool)

	// Iterate through all messages in the messageIndex.
	for _, msg := range messageIndex {
		// Process fields in this message.
		for _, field := range msg.Field {
			if field.GetType() == descriptorpb.FieldDescriptorProto_TYPE_MESSAGE {
				// Mark the type as used. The field type name should be fully qualified.
				used[field.GetTypeName()] = true
			}
		}
	}

	// Now, any message in messageIndex that isn't in the 'used' map is an entry point.
	var entrypoints []string
	for name := range messageIndex {
		if !used[name] {
			entrypoints = append(entrypoints, name)
		}
	}
	return entrypoints
}

// indexNestedMessages recursively indexes nested message types.
func indexNestedMessages(parent string, msg *descriptorpb.DescriptorProto, parentPath []int32) {
	for j, nested := range msg.NestedType {
		fqName := parent + "." + nested.GetName()
		messageIndex[fqName] = nested
		nestedPath := append(append([]int32(nil), parentPath...), 3, int32(j))
		protoPathIndex[fqName] = nestedPath
		indexNestedMessages(fqName, nested, nestedPath)
	}
	// Also index any enums nested in this message.
	for j, enum := range msg.EnumType {
		fqName := parent + "." + enum.GetName()
		enumPath := append(append([]int32(nil), parentPath...), 4, int32(j))
		enumIndex[fqName] = enum
		protoPathIndex[fqName] = enumPath
	}
}

// processMessage recursively prints message information, flattening nested types.
func processMessage(msg *descriptorpb.DescriptorProto, prefix string, outFile *os.File) {
	// Build the fully qualified message name.
	fullName := msg.GetName()
	if prefix != "" {
		fullName = prefix + "." + fullName
	}
	fmt.Fprintf(outFile, "Message: %s\n", fullName)

	// Print fields (customize as needed to show type shapes)
	for _, field := range msg.Field {
		fmt.Fprintf(outFile, "  Field: %s (type: %s)\n", field.GetName(), field.GetType().String())
	}

	// Recursively process nested messages.
	for _, nested := range msg.NestedType {
		processMessage(nested, fullName, outFile)
	}
}

// equalPath compares two slices of int32 for equality.
func equalPath(a, b protoPath) bool {
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

// lookupComment searches the sourceInfo locations for one whose Path matches the given path.
// It returns any leading comments (or, if absent, trailing comments) attached to that element.
func lookupComment(path protoPath) string {
	if sourceInfo == nil {
		return ""
	}
	for _, loc := range sourceInfo.Location {
		if equalPath(loc.Path, path) {
			comment := strings.TrimSpace(loc.GetLeadingComments())
			if comment == "" {
				comment = strings.TrimSpace(loc.GetTrailingComments())
			}
			return comment
		}
	}
	return ""
}
